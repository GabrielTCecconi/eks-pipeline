apiVersion: v1
kind: Namespace
metadata:
  name: appnode

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-config
  namespace: appnode
data:
  APP_NAME: "eks-node-app"
  VERSION: "1.0.0"

---
apiVersion: v1
kind: Service
metadata:
  name: node-app-service
  namespace: appnode
  labels: { app: appnode }
spec:
  type: ClusterIP
  selector: { app: appnode }
  ports:
    - name: http
      port: 80
      targetPort: 3000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-app-deployment
  namespace: appnode
  labels: { app: appnode }
spec:
  replicas: 2
  selector:
    matchLabels: { app: appnode }
  template:
    metadata:
      labels: { app: appnode }
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: app-node
          image: 725510651649.dkr.ecr.us-east-1.amazonaws.com/appnode/eks-pipeline:latest # substitue via CI harness
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: node-config
          readinessProbe:
            httpGet: { path: /healthz, port: 3000 }
            initialDelaySeconds: 3
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet: { path: /healthz, port: 3000 }
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          resources:
            requests: { cpu: "50m", memory: "64Mi" }
            limits:   { cpu: "250m", memory: "256Mi" }
